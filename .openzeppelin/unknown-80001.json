{
  "manifestVersion": "3.2",
  "admin": {
    "address": "0xf0eB7Ef6C6d05aF88e882cf1dbCC38a87cc6De7c",
    "txHash": "0x08c39883772255854f9e07e58b286318addca055d7b4b8df959fc89b1d6dd046"
  },
  "proxies": [
    {
      "address": "0xb1C7908a1Ba35130379c36554df6789c1563FED0",
      "txHash": "0x7c7053494999f23551c2a473e6ff654e9db66a80c778b41df66bdbf7339b9af5",
      "kind": "transparent"
    },
    {
      "address": "0x521deAfa129Fbf82701fb8360A5E62610FcE90DD",
      "txHash": "0x8a400a7db2a5138dc8695fcf7977683c03da97f22f426c3038479f86d84e7ad4",
      "kind": "transparent"
    },
    {
      "address": "0xad5131E36899d38a214CFAE0ca4603b27e32A813",
      "txHash": "0x08585977c621f6e90544dad975af48649dbd6d42cdf012ce547fb674a90f3c2e",
      "kind": "transparent"
    }
  ],
  "impls": {
    "dca954f5ea8d545c2e35e7bf1edd4d8a65bf07816b4774bca4092a120e82be4d": {
      "address": "0x0801B5DD2E14790F6Cd027815E299fA93272Ae78",
      "txHash": "0x9ca6ef19b7ab2c96aedabde58f943b2b021f69d268977e272d11aed0ff726971",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:39"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:44"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:25"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:28"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_uri",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:31"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)47_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:471"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "_paused",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:97"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "../@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "NftFractionsRepositoryBase",
            "label": "tokens",
            "type": "t_mapping(t_uint256,t_struct(Token)6446_storage)",
            "src": "../project:/contracts/NftFractionsRepositoryBase.sol:21"
          },
          {
            "contract": "MaticNftFractionsRepository",
            "label": "_ids",
            "type": "t_struct(Counter)1966_storage",
            "src": "../project:/contracts/MaticNftFractionsRepository.sol:16"
          }
        ],
        "types": {
          "t_struct(Counter)1966_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256"
              }
            ]
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_uint256,t_struct(Token)6446_storage)": {
            "label": "mapping(uint256 => struct NftFractionsRepositoryBase.Token)"
          },
          "t_struct(Token)6446_storage": {
            "label": "struct NftFractionsRepositoryBase.Token",
            "members": [
              {
                "label": "erc721ContractAddress",
                "type": "t_address"
              },
              {
                "label": "erc721TokenId",
                "type": "t_uint256"
              },
              {
                "label": "totalFractionsAmount",
                "type": "t_uint256"
              },
              {
                "label": "tokenURI",
                "type": "t_string_storage"
              }
            ]
          },
          "t_address": {
            "label": "address"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    }
  }
}
