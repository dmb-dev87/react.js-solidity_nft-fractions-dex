{
  "manifestVersion": "3.2",
  "admin": {
    "address": "0x300eF2f3E362B453835638A297A52b09A2e453f6",
    "txHash": "0x50d18928a60495881fae2d968f5a4929d5890d475bcb421b94e6606eea2b7cf8"
  },
  "proxies": [
    {
      "address": "0x70a121217441854DE3B2a40C5B081ECd6B3Caf69",
      "txHash": "0x6b31a7ce8063be57cd723d13fa0234fba5e273445f6444a1841291100e3d92d7",
      "kind": "transparent"
    },
    {
      "address": "0x53152d4a7bc4bC864D38A2E1682C65C25B218304",
      "txHash": "0xb545c49a6dd85d918abf80c0561765f756ee7badf14788beb467a987d3041aea",
      "kind": "transparent"
    }
  ],
  "impls": {
    "439d106c00603f6f84caf5d1925fdb5e0ce9ccd4c38d9d13ec84c92b1eaa0a15": {
      "address": "0x53C9305D21E87107C1F4be5aD3BB4AeD429Ae282",
      "txHash": "0xadb2c60f3ce834120ce79406f7e2e8033a01db1cc7f5048fdc1e9ff2215093cc",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:39"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:44"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:25"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:28"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_uri",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:31"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)47_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:471"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "_paused",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:97"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "../@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "NftFractionsRepositoryBase",
            "label": "tokens",
            "type": "t_mapping(t_uint256,t_struct(Token)6446_storage)",
            "src": "../project:/contracts/NftFractionsRepositoryBase.sol:21"
          },
          {
            "contract": "BscNftFractionsRepository",
            "label": "tokenIdsByShareOwner",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
            "src": "../project:/contracts/BscNftFractionsRepository.sol:9"
          },
          {
            "contract": "BscNftFractionsRepository",
            "label": "ownersByTokenId",
            "type": "t_mapping(t_uint256,t_array(t_address)dyn_storage)",
            "src": "../project:/contracts/BscNftFractionsRepository.sol:11"
          },
          {
            "contract": "BscNftFractionsRepository",
            "label": "tokenIds",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "../project:/contracts/BscNftFractionsRepository.sol:13"
          }
        ],
        "types": {
          "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(address => uint256[])"
          },
          "t_address": {
            "label": "address"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_uint256,t_array(t_address)dyn_storage)": {
            "label": "mapping(uint256 => address[])"
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]"
          },
          "t_mapping(t_uint256,t_struct(Token)6446_storage)": {
            "label": "mapping(uint256 => struct NftFractionsRepositoryBase.Token)"
          },
          "t_struct(Token)6446_storage": {
            "label": "struct NftFractionsRepositoryBase.Token",
            "members": [
              {
                "label": "erc721ContractAddress",
                "type": "t_address"
              },
              {
                "label": "erc721TokenId",
                "type": "t_uint256"
              },
              {
                "label": "totalFractionsAmount",
                "type": "t_uint256"
              },
              {
                "label": "tokenURI",
                "type": "t_string_storage"
              }
            ]
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "e09aae0e2a09086db4d962c43a023f6093ba993506962c7885064dfaa8b85f0f": {
      "address": "0xd9b8224a5Cf4FC4f993c9029C729053d7a874B61",
      "txHash": "0xfe36b24cfa2518e3f008d1096807eb5295fe1d6fbd18cedb76fd4ef489164a88",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:39"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:44"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "_paused",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:97"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "../@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "../@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "DexBase",
            "label": "_orderIds",
            "type": "t_struct(Counter)1966_storage",
            "src": "../project:/contracts/DexBase.sol:32"
          },
          {
            "contract": "DexBase",
            "label": "_tradeIds",
            "type": "t_struct(Counter)1966_storage",
            "src": "../project:/contracts/DexBase.sol:33"
          },
          {
            "contract": "DexBase",
            "label": "ethBalance",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "../project:/contracts/DexBase.sol:35"
          },
          {
            "contract": "DexBase",
            "label": "ethReservedBalance",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "../project:/contracts/DexBase.sol:36"
          },
          {
            "contract": "DexBase",
            "label": "orderBook",
            "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_array(t_struct(Order)4772_storage)dyn_storage))",
            "src": "../project:/contracts/DexBase.sol:37"
          },
          {
            "contract": "DexBase",
            "label": "sharesReserved",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "src": "../project:/contracts/DexBase.sol:38"
          },
          {
            "contract": "DexBase",
            "label": "nftFractionsRepository",
            "type": "t_contract(INftFractionsRepository)5958",
            "src": "../project:/contracts/DexBase.sol:39"
          }
        ],
        "types": {
          "t_struct(Counter)1966_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256"
              }
            ]
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_mapping(t_uint256,t_array(t_struct(Order)4772_storage)dyn_storage))": {
            "label": "mapping(uint256 => mapping(uint256 => struct DexBase.Order[]))"
          },
          "t_mapping(t_uint256,t_array(t_struct(Order)4772_storage)dyn_storage)": {
            "label": "mapping(uint256 => struct DexBase.Order[])"
          },
          "t_array(t_struct(Order)4772_storage)dyn_storage": {
            "label": "struct DexBase.Order[]"
          },
          "t_struct(Order)4772_storage": {
            "label": "struct DexBase.Order",
            "members": [
              {
                "label": "id",
                "type": "t_uint256"
              },
              {
                "label": "trader",
                "type": "t_address"
              },
              {
                "label": "side",
                "type": "t_enum(Side)4754"
              },
              {
                "label": "tokenId",
                "type": "t_uint256"
              },
              {
                "label": "amount",
                "type": "t_uint256"
              },
              {
                "label": "filled",
                "type": "t_uint256"
              },
              {
                "label": "price",
                "type": "t_uint256"
              },
              {
                "label": "date",
                "type": "t_uint256"
              }
            ]
          },
          "t_enum(Side)4754": {
            "label": "enum DexBase.Side",
            "members": [
              "BUY",
              "SELL"
            ]
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(address => mapping(uint256 => uint256))"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_contract(INftFractionsRepository)5958": {
            "label": "contract INftFractionsRepository"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    }
  }
}
